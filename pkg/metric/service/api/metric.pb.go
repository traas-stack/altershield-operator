//
//Copyright 2023 The Kapacity Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.23.3
// source: metric.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryType int32

const (
	QueryType_POD_RESOURCE                QueryType = 0
	QueryType_CONTAINER_RESOURCE          QueryType = 1
	QueryType_WORKLOAD_RESOURCE           QueryType = 2
	QueryType_WORKLOAD_CONTAINER_RESOURCE QueryType = 3
	QueryType_OBJECT                      QueryType = 4
	QueryType_EXTERNAL                    QueryType = 5
	QueryType_WORKLOAD_EXTERNAL           QueryType = 6
)

// Enum value maps for QueryType.
var (
	QueryType_name = map[int32]string{
		0: "POD_RESOURCE",
		1: "CONTAINER_RESOURCE",
		2: "WORKLOAD_RESOURCE",
		3: "WORKLOAD_CONTAINER_RESOURCE",
		4: "OBJECT",
		5: "EXTERNAL",
		6: "WORKLOAD_EXTERNAL",
	}
	QueryType_value = map[string]int32{
		"POD_RESOURCE":                0,
		"CONTAINER_RESOURCE":          1,
		"WORKLOAD_RESOURCE":           2,
		"WORKLOAD_CONTAINER_RESOURCE": 3,
		"OBJECT":                      4,
		"EXTERNAL":                    5,
		"WORKLOAD_EXTERNAL":           6,
	}
)

func (x QueryType) Enum() *QueryType {
	p := new(QueryType)
	*p = x
	return p
}

func (x QueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_metric_proto_enumTypes[0].Descriptor()
}

func (QueryType) Type() protoreflect.EnumType {
	return &file_metric_proto_enumTypes[0]
}

func (x QueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryType.Descriptor instead.
func (QueryType) EnumDescriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{0}
}

type Series struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*Point             `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	Labels map[string]string    `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Window *durationpb.Duration `protobuf:"bytes,3,opt,name=window,proto3,oneof" json:"window,omitempty"`
}

func (x *Series) Reset() {
	*x = Series{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Series) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Series) ProtoMessage() {}

func (x *Series) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Series.ProtoReflect.Descriptor instead.
func (*Series) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{0}
}

func (x *Series) GetPoints() []*Point {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *Series) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Series) GetWindow() *durationpb.Duration {
	if x != nil {
		return x.Window
	}
	return nil
}

type Sample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Point  *Point               `protobuf:"bytes,1,opt,name=point,proto3" json:"point,omitempty"`
	Labels map[string]string    `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Window *durationpb.Duration `protobuf:"bytes,3,opt,name=window,proto3,oneof" json:"window,omitempty"`
}

func (x *Sample) Reset() {
	*x = Sample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample) ProtoMessage() {}

func (x *Sample) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample.ProtoReflect.Descriptor instead.
func (*Sample) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{1}
}

func (x *Sample) GetPoint() *Point {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *Sample) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Sample) GetWindow() *durationpb.Duration {
	if x != nil {
		return x.Window
	}
	return nil
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value     float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{2}
}

func (x *Point) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Point) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type QueryType `protobuf:"varint,1,opt,name=type,proto3,enum=io.kapacitystack.metric.QueryType" json:"type,omitempty"`
	// Types that are assignable to Query:
	//
	//	*Query_PodResource
	//	*Query_ContainerResource
	//	*Query_WorkloadResource
	//	*Query_WorkloadContainerResource
	//	*Query_Object
	//	*Query_External
	//	*Query_WorkloadExternal
	Query isQuery_Query `protobuf_oneof:"query"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{3}
}

func (x *Query) GetType() QueryType {
	if x != nil {
		return x.Type
	}
	return QueryType_POD_RESOURCE
}

func (m *Query) GetQuery() isQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *Query) GetPodResource() *PodResourceQuery {
	if x, ok := x.GetQuery().(*Query_PodResource); ok {
		return x.PodResource
	}
	return nil
}

func (x *Query) GetContainerResource() *ContainerResourceQuery {
	if x, ok := x.GetQuery().(*Query_ContainerResource); ok {
		return x.ContainerResource
	}
	return nil
}

func (x *Query) GetWorkloadResource() *WorkloadResourceQuery {
	if x, ok := x.GetQuery().(*Query_WorkloadResource); ok {
		return x.WorkloadResource
	}
	return nil
}

func (x *Query) GetWorkloadContainerResource() *WorkloadContainerResourceQuery {
	if x, ok := x.GetQuery().(*Query_WorkloadContainerResource); ok {
		return x.WorkloadContainerResource
	}
	return nil
}

func (x *Query) GetObject() *ObjectQuery {
	if x, ok := x.GetQuery().(*Query_Object); ok {
		return x.Object
	}
	return nil
}

func (x *Query) GetExternal() *ExternalQuery {
	if x, ok := x.GetQuery().(*Query_External); ok {
		return x.External
	}
	return nil
}

func (x *Query) GetWorkloadExternal() *WorkloadExternalQuery {
	if x, ok := x.GetQuery().(*Query_WorkloadExternal); ok {
		return x.WorkloadExternal
	}
	return nil
}

type isQuery_Query interface {
	isQuery_Query()
}

type Query_PodResource struct {
	PodResource *PodResourceQuery `protobuf:"bytes,2,opt,name=pod_resource,json=podResource,proto3,oneof"`
}

type Query_ContainerResource struct {
	ContainerResource *ContainerResourceQuery `protobuf:"bytes,3,opt,name=container_resource,json=containerResource,proto3,oneof"`
}

type Query_WorkloadResource struct {
	WorkloadResource *WorkloadResourceQuery `protobuf:"bytes,4,opt,name=workload_resource,json=workloadResource,proto3,oneof"`
}

type Query_WorkloadContainerResource struct {
	WorkloadContainerResource *WorkloadContainerResourceQuery `protobuf:"bytes,5,opt,name=workload_container_resource,json=workloadContainerResource,proto3,oneof"`
}

type Query_Object struct {
	Object *ObjectQuery `protobuf:"bytes,6,opt,name=object,proto3,oneof"`
}

type Query_External struct {
	External *ExternalQuery `protobuf:"bytes,7,opt,name=external,proto3,oneof"`
}

type Query_WorkloadExternal struct {
	WorkloadExternal *WorkloadExternalQuery `protobuf:"bytes,8,opt,name=workload_external,json=workloadExternal,proto3,oneof"`
}

func (*Query_PodResource) isQuery_Query() {}

func (*Query_ContainerResource) isQuery_Query() {}

func (*Query_WorkloadResource) isQuery_Query() {}

func (*Query_WorkloadContainerResource) isQuery_Query() {}

func (*Query_Object) isQuery_Query() {}

func (*Query_External) isQuery_Query() {}

func (*Query_WorkloadExternal) isQuery_Query() {}

type PodResourceQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Types that are assignable to PodIdentifier:
	//
	//	*PodResourceQuery_Name
	//	*PodResourceQuery_Selector
	PodIdentifier isPodResourceQuery_PodIdentifier `protobuf_oneof:"pod_identifier"`
	ResourceName  string                           `protobuf:"bytes,4,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
}

func (x *PodResourceQuery) Reset() {
	*x = PodResourceQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodResourceQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodResourceQuery) ProtoMessage() {}

func (x *PodResourceQuery) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodResourceQuery.ProtoReflect.Descriptor instead.
func (*PodResourceQuery) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{4}
}

func (x *PodResourceQuery) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (m *PodResourceQuery) GetPodIdentifier() isPodResourceQuery_PodIdentifier {
	if m != nil {
		return m.PodIdentifier
	}
	return nil
}

func (x *PodResourceQuery) GetName() string {
	if x, ok := x.GetPodIdentifier().(*PodResourceQuery_Name); ok {
		return x.Name
	}
	return ""
}

func (x *PodResourceQuery) GetSelector() string {
	if x, ok := x.GetPodIdentifier().(*PodResourceQuery_Selector); ok {
		return x.Selector
	}
	return ""
}

func (x *PodResourceQuery) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

type isPodResourceQuery_PodIdentifier interface {
	isPodResourceQuery_PodIdentifier()
}

type PodResourceQuery_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

type PodResourceQuery_Selector struct {
	Selector string `protobuf:"bytes,3,opt,name=selector,proto3,oneof"`
}

func (*PodResourceQuery_Name) isPodResourceQuery_PodIdentifier() {}

func (*PodResourceQuery_Selector) isPodResourceQuery_PodIdentifier() {}

type ContainerResourceQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Types that are assignable to PodIdentifier:
	//
	//	*ContainerResourceQuery_Name
	//	*ContainerResourceQuery_Selector
	PodIdentifier isContainerResourceQuery_PodIdentifier `protobuf_oneof:"pod_identifier"`
	ResourceName  string                                 `protobuf:"bytes,4,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	ContainerName string                                 `protobuf:"bytes,5,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
}

func (x *ContainerResourceQuery) Reset() {
	*x = ContainerResourceQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerResourceQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerResourceQuery) ProtoMessage() {}

func (x *ContainerResourceQuery) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerResourceQuery.ProtoReflect.Descriptor instead.
func (*ContainerResourceQuery) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{5}
}

func (x *ContainerResourceQuery) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (m *ContainerResourceQuery) GetPodIdentifier() isContainerResourceQuery_PodIdentifier {
	if m != nil {
		return m.PodIdentifier
	}
	return nil
}

func (x *ContainerResourceQuery) GetName() string {
	if x, ok := x.GetPodIdentifier().(*ContainerResourceQuery_Name); ok {
		return x.Name
	}
	return ""
}

func (x *ContainerResourceQuery) GetSelector() string {
	if x, ok := x.GetPodIdentifier().(*ContainerResourceQuery_Selector); ok {
		return x.Selector
	}
	return ""
}

func (x *ContainerResourceQuery) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ContainerResourceQuery) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

type isContainerResourceQuery_PodIdentifier interface {
	isContainerResourceQuery_PodIdentifier()
}

type ContainerResourceQuery_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

type ContainerResourceQuery_Selector struct {
	Selector string `protobuf:"bytes,3,opt,name=selector,proto3,oneof"`
}

func (*ContainerResourceQuery_Name) isContainerResourceQuery_PodIdentifier() {}

func (*ContainerResourceQuery_Selector) isContainerResourceQuery_PodIdentifier() {}

type WorkloadResourceQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupKind     *GroupKind `protobuf:"bytes,1,opt,name=group_kind,json=groupKind,proto3" json:"group_kind,omitempty"`
	Namespace     string     `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name          string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ResourceName  string     `protobuf:"bytes,4,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	ReadyPodsOnly bool       `protobuf:"varint,5,opt,name=ready_pods_only,json=readyPodsOnly,proto3" json:"ready_pods_only,omitempty"`
}

func (x *WorkloadResourceQuery) Reset() {
	*x = WorkloadResourceQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadResourceQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadResourceQuery) ProtoMessage() {}

func (x *WorkloadResourceQuery) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadResourceQuery.ProtoReflect.Descriptor instead.
func (*WorkloadResourceQuery) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{6}
}

func (x *WorkloadResourceQuery) GetGroupKind() *GroupKind {
	if x != nil {
		return x.GroupKind
	}
	return nil
}

func (x *WorkloadResourceQuery) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WorkloadResourceQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkloadResourceQuery) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *WorkloadResourceQuery) GetReadyPodsOnly() bool {
	if x != nil {
		return x.ReadyPodsOnly
	}
	return false
}

type WorkloadContainerResourceQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupKind     *GroupKind `protobuf:"bytes,1,opt,name=group_kind,json=groupKind,proto3" json:"group_kind,omitempty"`
	Namespace     string     `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name          string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ResourceName  string     `protobuf:"bytes,4,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	ContainerName string     `protobuf:"bytes,5,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	ReadyPodsOnly bool       `protobuf:"varint,6,opt,name=ready_pods_only,json=readyPodsOnly,proto3" json:"ready_pods_only,omitempty"`
}

func (x *WorkloadContainerResourceQuery) Reset() {
	*x = WorkloadContainerResourceQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadContainerResourceQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadContainerResourceQuery) ProtoMessage() {}

func (x *WorkloadContainerResourceQuery) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadContainerResourceQuery.ProtoReflect.Descriptor instead.
func (*WorkloadContainerResourceQuery) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{7}
}

func (x *WorkloadContainerResourceQuery) GetGroupKind() *GroupKind {
	if x != nil {
		return x.GroupKind
	}
	return nil
}

func (x *WorkloadContainerResourceQuery) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WorkloadContainerResourceQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkloadContainerResourceQuery) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *WorkloadContainerResourceQuery) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *WorkloadContainerResourceQuery) GetReadyPodsOnly() bool {
	if x != nil {
		return x.ReadyPodsOnly
	}
	return false
}

type ObjectQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupKind *GroupKind `protobuf:"bytes,1,opt,name=group_kind,json=groupKind,proto3" json:"group_kind,omitempty"`
	Namespace *string    `protobuf:"bytes,2,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
	// Types that are assignable to ObjectIdentifier:
	//
	//	*ObjectQuery_Name
	//	*ObjectQuery_Selector
	ObjectIdentifier isObjectQuery_ObjectIdentifier `protobuf_oneof:"object_identifier"`
	Metric           *MetricIdentifier              `protobuf:"bytes,5,opt,name=metric,proto3" json:"metric,omitempty"`
}

func (x *ObjectQuery) Reset() {
	*x = ObjectQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectQuery) ProtoMessage() {}

func (x *ObjectQuery) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectQuery.ProtoReflect.Descriptor instead.
func (*ObjectQuery) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{8}
}

func (x *ObjectQuery) GetGroupKind() *GroupKind {
	if x != nil {
		return x.GroupKind
	}
	return nil
}

func (x *ObjectQuery) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (m *ObjectQuery) GetObjectIdentifier() isObjectQuery_ObjectIdentifier {
	if m != nil {
		return m.ObjectIdentifier
	}
	return nil
}

func (x *ObjectQuery) GetName() string {
	if x, ok := x.GetObjectIdentifier().(*ObjectQuery_Name); ok {
		return x.Name
	}
	return ""
}

func (x *ObjectQuery) GetSelector() string {
	if x, ok := x.GetObjectIdentifier().(*ObjectQuery_Selector); ok {
		return x.Selector
	}
	return ""
}

func (x *ObjectQuery) GetMetric() *MetricIdentifier {
	if x != nil {
		return x.Metric
	}
	return nil
}

type isObjectQuery_ObjectIdentifier interface {
	isObjectQuery_ObjectIdentifier()
}

type ObjectQuery_Name struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

type ObjectQuery_Selector struct {
	Selector string `protobuf:"bytes,4,opt,name=selector,proto3,oneof"`
}

func (*ObjectQuery_Name) isObjectQuery_ObjectIdentifier() {}

func (*ObjectQuery_Selector) isObjectQuery_ObjectIdentifier() {}

type ExternalQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *string           `protobuf:"bytes,1,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
	Metric    *MetricIdentifier `protobuf:"bytes,2,opt,name=metric,proto3" json:"metric,omitempty"`
}

func (x *ExternalQuery) Reset() {
	*x = ExternalQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalQuery) ProtoMessage() {}

func (x *ExternalQuery) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalQuery.ProtoReflect.Descriptor instead.
func (*ExternalQuery) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{9}
}

func (x *ExternalQuery) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *ExternalQuery) GetMetric() *MetricIdentifier {
	if x != nil {
		return x.Metric
	}
	return nil
}

type WorkloadExternalQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupKind *GroupKind        `protobuf:"bytes,1,opt,name=group_kind,json=groupKind,proto3" json:"group_kind,omitempty"`
	Namespace string            `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Metric    *MetricIdentifier `protobuf:"bytes,4,opt,name=metric,proto3" json:"metric,omitempty"`
}

func (x *WorkloadExternalQuery) Reset() {
	*x = WorkloadExternalQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadExternalQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadExternalQuery) ProtoMessage() {}

func (x *WorkloadExternalQuery) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadExternalQuery.ProtoReflect.Descriptor instead.
func (*WorkloadExternalQuery) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{10}
}

func (x *WorkloadExternalQuery) GetGroupKind() *GroupKind {
	if x != nil {
		return x.GroupKind
	}
	return nil
}

func (x *WorkloadExternalQuery) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WorkloadExternalQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkloadExternalQuery) GetMetric() *MetricIdentifier {
	if x != nil {
		return x.Metric
	}
	return nil
}

type GroupKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Kind  string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *GroupKind) Reset() {
	*x = GroupKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupKind) ProtoMessage() {}

func (x *GroupKind) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupKind.ProtoReflect.Descriptor instead.
func (*GroupKind) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{11}
}

func (x *GroupKind) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *GroupKind) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type MetricIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Selector *string `protobuf:"bytes,2,opt,name=selector,proto3,oneof" json:"selector,omitempty"`
}

func (x *MetricIdentifier) Reset() {
	*x = MetricIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricIdentifier) ProtoMessage() {}

func (x *MetricIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricIdentifier.ProtoReflect.Descriptor instead.
func (*MetricIdentifier) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{12}
}

func (x *MetricIdentifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricIdentifier) GetSelector() string {
	if x != nil && x.Selector != nil {
		return *x.Selector
	}
	return ""
}

var File_metric_proto protoreflect.FileDescriptor

var file_metric_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17,
	0x69, 0x6f, 0x2e, 0x6b, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x02, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x6b, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e,
	0x6b, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x36, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x81, 0x02,
	0x0a, 0x06, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x6b, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x43,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x69, 0x6f, 0x2e, 0x6b, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x22, 0x3b, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb9,
	0x05, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x6b, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x4e, 0x0a, 0x0c, 0x70, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x6b, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x60, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69,
	0x6f, 0x2e, 0x6b, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x5d, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x69, 0x6f, 0x2e, 0x6b, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x10, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x79, 0x0a, 0x1b, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x6b, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69,
	0x6f, 0x2e, 0x6b, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x08,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x69, 0x6f, 0x2e, 0x6b, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x12, 0x5d, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x69, 0x6f, 0x2e, 0x6b, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x10, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x50,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x70, 0x6f, 0x64, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xc8, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x70, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x22, 0xd9, 0x01, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x41, 0x0a,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x6b, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x5f, 0x70, 0x6f, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x79, 0x50, 0x6f, 0x64, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22,
	0x89, 0x02, 0x0a, 0x1e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x41, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x6b, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x70, 0x6f, 0x64,
	0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x50, 0x6f, 0x64, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x8d, 0x02, 0x0a, 0x0b,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x6b, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x21,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x6b, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x13, 0x0a, 0x11, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x0d,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x21, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x41, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x6b, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x22, 0xcf, 0x01, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x6b, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x41, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x6b, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x22, 0x35, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x54, 0x0a, 0x10, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2a, 0x9e, 0x01, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x4f, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x4f, 0x52, 0x4b,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x02, 0x12,
	0x1f, 0x0a, 0x1b, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x4f,
	0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10,
	0x06, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x74, 0x72, 0x61, 0x61, 0x73, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x6b, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_metric_proto_rawDescOnce sync.Once
	file_metric_proto_rawDescData = file_metric_proto_rawDesc
)

func file_metric_proto_rawDescGZIP() []byte {
	file_metric_proto_rawDescOnce.Do(func() {
		file_metric_proto_rawDescData = protoimpl.X.CompressGZIP(file_metric_proto_rawDescData)
	})
	return file_metric_proto_rawDescData
}

var file_metric_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_metric_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_metric_proto_goTypes = []interface{}{
	(QueryType)(0),                         // 0: io.kapacitystack.metric.QueryType
	(*Series)(nil),                         // 1: io.kapacitystack.metric.Series
	(*Sample)(nil),                         // 2: io.kapacitystack.metric.Sample
	(*Point)(nil),                          // 3: io.kapacitystack.metric.Point
	(*Query)(nil),                          // 4: io.kapacitystack.metric.Query
	(*PodResourceQuery)(nil),               // 5: io.kapacitystack.metric.PodResourceQuery
	(*ContainerResourceQuery)(nil),         // 6: io.kapacitystack.metric.ContainerResourceQuery
	(*WorkloadResourceQuery)(nil),          // 7: io.kapacitystack.metric.WorkloadResourceQuery
	(*WorkloadContainerResourceQuery)(nil), // 8: io.kapacitystack.metric.WorkloadContainerResourceQuery
	(*ObjectQuery)(nil),                    // 9: io.kapacitystack.metric.ObjectQuery
	(*ExternalQuery)(nil),                  // 10: io.kapacitystack.metric.ExternalQuery
	(*WorkloadExternalQuery)(nil),          // 11: io.kapacitystack.metric.WorkloadExternalQuery
	(*GroupKind)(nil),                      // 12: io.kapacitystack.metric.GroupKind
	(*MetricIdentifier)(nil),               // 13: io.kapacitystack.metric.MetricIdentifier
	nil,                                    // 14: io.kapacitystack.metric.Series.LabelsEntry
	nil,                                    // 15: io.kapacitystack.metric.Sample.LabelsEntry
	(*durationpb.Duration)(nil),            // 16: google.protobuf.Duration
}
var file_metric_proto_depIdxs = []int32{
	3,  // 0: io.kapacitystack.metric.Series.points:type_name -> io.kapacitystack.metric.Point
	14, // 1: io.kapacitystack.metric.Series.labels:type_name -> io.kapacitystack.metric.Series.LabelsEntry
	16, // 2: io.kapacitystack.metric.Series.window:type_name -> google.protobuf.Duration
	3,  // 3: io.kapacitystack.metric.Sample.point:type_name -> io.kapacitystack.metric.Point
	15, // 4: io.kapacitystack.metric.Sample.labels:type_name -> io.kapacitystack.metric.Sample.LabelsEntry
	16, // 5: io.kapacitystack.metric.Sample.window:type_name -> google.protobuf.Duration
	0,  // 6: io.kapacitystack.metric.Query.type:type_name -> io.kapacitystack.metric.QueryType
	5,  // 7: io.kapacitystack.metric.Query.pod_resource:type_name -> io.kapacitystack.metric.PodResourceQuery
	6,  // 8: io.kapacitystack.metric.Query.container_resource:type_name -> io.kapacitystack.metric.ContainerResourceQuery
	7,  // 9: io.kapacitystack.metric.Query.workload_resource:type_name -> io.kapacitystack.metric.WorkloadResourceQuery
	8,  // 10: io.kapacitystack.metric.Query.workload_container_resource:type_name -> io.kapacitystack.metric.WorkloadContainerResourceQuery
	9,  // 11: io.kapacitystack.metric.Query.object:type_name -> io.kapacitystack.metric.ObjectQuery
	10, // 12: io.kapacitystack.metric.Query.external:type_name -> io.kapacitystack.metric.ExternalQuery
	11, // 13: io.kapacitystack.metric.Query.workload_external:type_name -> io.kapacitystack.metric.WorkloadExternalQuery
	12, // 14: io.kapacitystack.metric.WorkloadResourceQuery.group_kind:type_name -> io.kapacitystack.metric.GroupKind
	12, // 15: io.kapacitystack.metric.WorkloadContainerResourceQuery.group_kind:type_name -> io.kapacitystack.metric.GroupKind
	12, // 16: io.kapacitystack.metric.ObjectQuery.group_kind:type_name -> io.kapacitystack.metric.GroupKind
	13, // 17: io.kapacitystack.metric.ObjectQuery.metric:type_name -> io.kapacitystack.metric.MetricIdentifier
	13, // 18: io.kapacitystack.metric.ExternalQuery.metric:type_name -> io.kapacitystack.metric.MetricIdentifier
	12, // 19: io.kapacitystack.metric.WorkloadExternalQuery.group_kind:type_name -> io.kapacitystack.metric.GroupKind
	13, // 20: io.kapacitystack.metric.WorkloadExternalQuery.metric:type_name -> io.kapacitystack.metric.MetricIdentifier
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_metric_proto_init() }
func file_metric_proto_init() {
	if File_metric_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_metric_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Series); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodResourceQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerResourceQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadResourceQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadContainerResourceQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadExternalQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_metric_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_metric_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_metric_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Query_PodResource)(nil),
		(*Query_ContainerResource)(nil),
		(*Query_WorkloadResource)(nil),
		(*Query_WorkloadContainerResource)(nil),
		(*Query_Object)(nil),
		(*Query_External)(nil),
		(*Query_WorkloadExternal)(nil),
	}
	file_metric_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*PodResourceQuery_Name)(nil),
		(*PodResourceQuery_Selector)(nil),
	}
	file_metric_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ContainerResourceQuery_Name)(nil),
		(*ContainerResourceQuery_Selector)(nil),
	}
	file_metric_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ObjectQuery_Name)(nil),
		(*ObjectQuery_Selector)(nil),
	}
	file_metric_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_metric_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metric_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_metric_proto_goTypes,
		DependencyIndexes: file_metric_proto_depIdxs,
		EnumInfos:         file_metric_proto_enumTypes,
		MessageInfos:      file_metric_proto_msgTypes,
	}.Build()
	File_metric_proto = out.File
	file_metric_proto_rawDesc = nil
	file_metric_proto_goTypes = nil
	file_metric_proto_depIdxs = nil
}
